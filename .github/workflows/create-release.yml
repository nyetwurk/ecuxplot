name: Create Release

on:
  workflow_call:
    inputs:
      tag-name:
        required: true
        type: string
        description: 'Tag name for the release'
      release-name:
        required: true
        type: string
        description: 'Display name for the release'
      is-prerelease:
        required: false
        type: boolean
        default: false
        description: 'Whether this is a prerelease'
      release-body:
        required: false
        type: string
        description: 'Release body text'
      is-latest:
        required: false
        type: boolean
        default: false
        description: 'Whether this is a latest build (affects which files are included)'

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5

      - name: Backup and delete existing tag
        id: backup_tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Check if local tag exists and backup its commit hash
          if git rev-parse "${{ inputs.tag-name }}" >/dev/null 2>&1; then
            BACKUP_COMMIT=$(git rev-parse "${{ inputs.tag-name }}")
            echo "backup_commit=$BACKUP_COMMIT" >> $GITHUB_OUTPUT
            echo "local_tag_exists=true" >> $GITHUB_OUTPUT
            echo "Backing up local ${{ inputs.tag-name }} at commit $BACKUP_COMMIT"
          else
            echo "local_tag_exists=false" >> $GITHUB_OUTPUT
            echo "No local tag to backup"
          fi

          # Check if remote tag exists
          if git ls-remote --tags origin | grep -q "refs/tags/${{ inputs.tag-name }}$"; then
            echo "remote_tag_exists=true" >> $GITHUB_OUTPUT
            echo "Remote tag ${{ inputs.tag-name }} exists"
          else
            echo "remote_tag_exists=false" >> $GITHUB_OUTPUT
            echo "No remote tag ${{ inputs.tag-name }} exists"
          fi

          # Delete local tag if it exists
          if git rev-parse "${{ inputs.tag-name }}" >/dev/null 2>&1; then
            echo "Deleting local tag ${{ inputs.tag-name }}"
            git tag -d "${{ inputs.tag-name }}"
          fi

          # Delete remote tag if it exists
          if git ls-remote --tags origin | grep -q "refs/tags/${{ inputs.tag-name }}$"; then
            echo "Deleting remote tag ${{ inputs.tag-name }}"
            git push origin --delete "${{ inputs.tag-name }}"
          fi

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag-name }}
          name: ${{ inputs.release-name }}
          draft: false
          prerelease: ${{ inputs.is-prerelease }}
          generate_release_notes: true
          body: ${{ inputs.release-body }}
          files: |
            macos-builds/build/*.dmg
            macos-builds/ECUxPlot.dmg
            macos-builds/build/*.zip
            ${{ inputs.is-latest && 'linux-windows-builds/build/ECUxPlot-latest.jar' || 'linux-windows-builds/build/ECUxPlot-*.jar' }}
            linux-windows-builds/build/*.tar.gz
            linux-windows-builds/build/*.exe
            linux-windows-builds/ECUxPlot-setup.exe
            linux-windows-builds/ECUxPlot.jar
            linux-windows-builds/mapdump.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore backup tag if release failed
        if: steps.create_release.outcome != 'success' && steps.backup_tag.outputs.local_tag_exists == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          echo "Release failed, restoring backup tag ${{ inputs.tag-name }} to commit ${{ steps.backup_tag.outputs.backup_commit }}"
          git tag -a "${{ inputs.tag-name }}" "${{ steps.backup_tag.outputs.backup_commit }}" -m "Restored backup tag"
          git push origin "${{ inputs.tag-name }}"
