#!/usr/bin/env python3
"""
Generic YAML to XML converter.
Converts any YAML file to XML format using filename-based root element naming.
"""

import yaml
import xml.etree.ElementTree as ET
import sys
import os

def yaml_to_xml(yaml_file, xml_file):
    """Convert any YAML file to XML format."""

    # Read YAML file
    with open(yaml_file, 'r') as f:
        data = yaml.safe_load(f)

    # Create XML root - derive from filename (e.g., loggers.yaml -> <loggers>)
    root_name = os.path.splitext(os.path.basename(yaml_file))[0]
    root = ET.Element(root_name)

    # Process all top-level items dynamically
    for key, value in data.items():
        if isinstance(value, dict):
            # Dictionary becomes a sub-element
            sub_elem = ET.SubElement(root, key)
            process_dict(sub_elem, value)
        elif isinstance(value, list):
            # List becomes a sub-element with items
            list_elem = ET.SubElement(root, key)
            for item in value:
                if isinstance(item, dict):
                    item_elem = ET.SubElement(list_elem, 'item')
                    process_dict(item_elem, item)
                elif isinstance(item, list) and len(item) == 2:
                    # List of 2 items becomes pattern/target
                    item_elem = ET.SubElement(list_elem, 'item')
                    item_elem.set('pattern', str(item[0]))
                    item_elem.set('target', str(item[1]))
                else:
                    # Simple items become text content
                    item_elem = ET.SubElement(list_elem, 'item')
                    item_elem.text = str(item)
        else:
            # Scalar becomes attribute
            if isinstance(value, bool):
                root.set(key, str(value).lower())
            else:
                root.set(key, str(value))

    # Write XML file with warning comment
    tree = ET.ElementTree(root)
    ET.indent(tree, space="    ", level=0)  # Pretty print

    # Add warning comment to the XML header
    warning_comment = """<?xml version='1.0' encoding='utf-8'?>
<!--
    ⚠️  WARNING: DO NOT EDIT THIS FILE DIRECTLY! ⚠️

    This XML file is automatically generated from loggers.yaml
    Any manual changes will be overwritten on the next build.

    To make changes:
    1. Edit src/org/nyet/ecuxplot/loggers.yaml
    2. Run: python scripts/yaml_to_xml.py src/org/nyet/ecuxplot/loggers.yaml src/org/nyet/ecuxplot/loggers.xml
    3. Commit both files

    Generated by: yaml_to_xml.py
-->
"""

    # Write the warning comment first, then the XML content
    with open(xml_file, 'w', encoding='utf-8') as f:
        f.write(warning_comment)
        tree.write(f, encoding='unicode', xml_declaration=False)

    print(f"Converted {yaml_file} to {xml_file}")

def process_dict(parent_elem, data_dict):
    """Recursively process dictionary data into XML elements."""
    for key, value in data_dict.items():
        if isinstance(value, dict):
            # Dictionary becomes a sub-element
            sub_elem = ET.SubElement(parent_elem, key)
            process_dict(sub_elem, value)
        elif isinstance(value, list):
            # List becomes a sub-element with items
            list_elem = ET.SubElement(parent_elem, key)
            for item in value:
                if isinstance(item, dict):
                    item_elem = ET.SubElement(list_elem, 'item')
                    process_dict(item_elem, item)
                elif isinstance(item, list) and len(item) == 2:
                    # List of 2 items becomes pattern/target (common for aliases)
                    item_elem = ET.SubElement(list_elem, 'item')
                    item_elem.set('pattern', str(item[0]))
                    item_elem.set('target', str(item[1]))
                else:
                    # Simple items become text content
                    item_elem = ET.SubElement(list_elem, 'item')
                    item_elem.text = str(item)
        else:
            # Scalar becomes attribute
            if isinstance(value, bool):
                parent_elem.set(key, str(value).lower())
            else:
                parent_elem.set(key, str(value))

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: yaml_to_xml.py <input.yaml> <output.xml>")
        print("Generic YAML to XML converter - works with any YAML file")
        sys.exit(1)

    yaml_file = sys.argv[1]
    xml_file = sys.argv[2]

    if not os.path.exists(yaml_file):
        print(f"Error: YAML file {yaml_file} not found")
        sys.exit(1)

    try:
        yaml_to_xml(yaml_file, xml_file)
    except Exception as e:
        print(f"Error converting YAML to XML: {e}")
        sys.exit(1)
